install.packages("xlsx")
library(xlsx)
install.packages("rJava")
library(xlsx)
library(rJava)
library(xlsx, dependencies = TRUE)
install.packages("xlsx", dependencies = TRUE)
library(xlsx)
install.packages(c("actuar", "AlgDesign", "Anthropometry", "aqp", "argonR", "bayesplot", "BDgraph", "Benchmarking", "BH", "bibtex", "bio3d", "BiocManager", "bookdown", "boot", "broom", "callr", "car", "carData", "caTools", "cli", "covr", "cubature", "curl", "data.table", "data.tree", "DBI", "depth", "DescTools", "deSolve", "dials", "digest", "DT", "dvmisc", "e1071", "effects", "emmeans", "emojifont", "expint", "expss", "farver", "fields", "flextable", "forecast", "foreign", "fracdiff", "future", "geepack", "geometry", "GGIR", "glmnet", "globals", "goftest", "gsl", "hexbin", "HH", "highlight", "Hmisc", "hommel", "htmlTable", "igraph", "infer", "ISOcodes", "kernlab", "knitr", "latticeExtra", "leaflet", "leaflet.minicharts", "limSolve", "listenv", "lmerTest", "loo", "maptools", "MASS", "MCMCpack", "metap", "mice", "mime", "miscTools", "multcomp", "multicool", "nlme", "officer", "OpenMx", "openxlsx", "ordinal", "paletteer", "pals", "phylocomr", "pillar", "plotKML", "plotrix", "plyr", "pracma", "prismatic", "prodlim", "psych", "qgraph", "quadprog", "quantreg", "R.cache", "R.utils", "R6", "rAmCharts", "RandomFields", "Rcpp", "RcppArmadillo", "RcppEigen", "Rdpack", "recipes", "rgdal", "rjags", "rlang", "rlecuyer", "RMariaDB", "rmarkdown", "rms", "RNeXML", "RNifti", "robust", "rootSolve", "roxygen2", "rrcov", "rsconnect", "RSpectra", "RSQLite", "rversions", "rvest", "scales", "SDMTools", "seewave", "segmented", "selectr", "shapes", "shinyWidgets", "skimr", "slam", "spam", "SparseM", "spatstat", "spatstat.utils", "spMaps", "taxize", "testthat", "tidyverse", "tinytex", "TTR", "unmarked", "vctrs", "VGAM", "visNetwork", "webshot", "writexl", "xfun"))
library(lubridate)
# Set start and end dates
start <- as.Date("2020-01-13")
end <- as.Date("2017-05-01")
# Set days to include and exclude
include_days <- seq(start , end, by = "day")
exclude_days <- c("Monday", "Wednesday", "Friday", "Saturday", "Sunday")
# Subset to exclude above days
my_weekdays <- subset(include_days, !weekdays(include_days) %in% exclude_days)
# Extract elements
day <- weekdays(my_weekdays, abbreviate = TRUE)
day_num <- day(my_weekdays)
month <- months(my_weekdays, abbr = TRUE)
# Paste elements
days <- paste(day, day_num, sep = ". ")
date <- paste(days, month, sep = "-")
week <- rep(1:16, each = 2)
# Set days to include and exclude
include_days <- seq(start , end, by = "day")
# Set start and end dates
start <- as.Date("2020-01-13")
end <- as.Date("2020-05-01")
# Set days to include and exclude
include_days <- seq(start , end, by = "day")
exclude_days <- c("Monday", "Wednesday", "Friday", "Saturday", "Sunday")
# Subset to exclude above days
my_weekdays <- subset(include_days, !weekdays(include_days) %in% exclude_days)
# Extract elements
day <- weekdays(my_weekdays, abbreviate = TRUE)
day_num <- day(my_weekdays)
month <- months(my_weekdays, abbr = TRUE)
# Paste elements
days <- paste(day, day_num, sep = ". ")
date <- paste(days, month, sep = "-")
week <- rep(1:16, each = 2)
# Write out data frame of week, days, and dates for semester
write.xlsx(data.frame(week, date), "Desktop/tr.xlsx",
row.names = FALSE)
library(tidyverse)
library(writexl)
library(writexl)
# Write out data frame of week, days, and dates for semester
write_xlsx(data.frame(week, date), "Desktop/tr.xlsx",
row.names = FALSE)
# Write out data frame of week, days, and dates for semester
write_xlsx(data.frame(week, date), "Desktop/tr.xlsx")
?write_xlsx
data.frame(week, date)
# Write out data frame of week, days, and dates for semester
write_xlsx(data_frame(week, date), "Desktop/tr.xlsx")
# Write out data frame of week, days, and dates for semester
write_xlsx(tibble(week, date), "Desktop/tr.xlsx")
tibble(week, date)
# Write out data frame of week, days, and dates for semester
cal <- tibble(week, date)
write_xlsx(cal, path = "Desktop/tr.xlsx")
write_xlsx(cal, path = "/Desktop/tr.xlsx")
write_xlsx(cal, path = "~/Desktop/tr.xlsx")
library(lubridate)
library(writexl)
# Set start and end dates
start <- as.Date("2020-01-13")
end <- as.Date("2020-05-01")
# Set days to include and exclude
include_days <- seq(start , end, by = "day")
# exclude_days <- c("Monday", "Wednesday", "Friday", "Saturday", "Sunday")
exclude_days <- c("Monday", "Wednesday", "Friday", "Sunday")
# Subset to exclude above days
my_weekdays <- subset(include_days, !weekdays(include_days) %in% exclude_days)
# Extract elements
day <- weekdays(my_weekdays, abbreviate = TRUE)
day_num <- day(my_weekdays)
month <- months(my_weekdays, abbr = TRUE)
# Paste elements
days <- paste(day, day_num, sep = ". ")
date <- paste(days, month, sep = "-")
week <- rep(1:16, each = 2)
# Write out data frame of week, days, and dates for semester
cal <- tibble(week, date)
write_xlsx(cal, path = "~/Desktop/tr.xlsx")
library(lubridate)
library(writexl)
# Set start and end dates
start <- as.Date("2020-01-13")
end <- as.Date("2020-05-01")
# Set days to include and exclude
include_days <- seq(start , end, by = "day")
# exclude_days <- c("Monday", "Wednesday", "Friday", "Saturday", "Sunday")
exclude_days <- c("Monday", "Wednesday", "Friday", "Sunday")
# Subset to exclude above days
my_weekdays <- subset(include_days, !weekdays(include_days) %in% exclude_days)
# Extract elements
day <- weekdays(my_weekdays, abbreviate = TRUE)
day_num <- day(my_weekdays)
month <- months(my_weekdays, abbr = TRUE)
# Paste elements
days <- paste(day, day_num, sep = ". ")
date <- paste(days, month, sep = "-")
week <- rep(1:16, each = 3)
# Write out data frame of week, days, and dates for semester
cal <- tibble(week, date)
write_xlsx(cal, path = "~/Desktop/tr.xlsx")
library(tidyverse)
library(lubridate)
library(writexl)
library(tidyverse)
# Set start and end dates
start <- as.Date("2020-01-13")
end <- as.Date("2020-05-01")
# Set days to include and exclude
include_days <- seq(start , end, by = "day")
# exclude_days <- c("Monday", "Wednesday", "Friday", "Saturday", "Sunday")
exclude_days <- c("Monday", "Wednesday", "Friday", "Sunday")
# Subset to exclude above days
my_weekdays <- subset(include_days, !weekdays(include_days) %in% exclude_days)
# Extract elements
day <- weekdays(my_weekdays, abbreviate = TRUE)
day_num <- day(my_weekdays)
month <- months(my_weekdays, abbr = TRUE)
# Paste elements
days <- paste(day, day_num, sep = ". ")
date <- paste(days, month, sep = "-")
week <- rep(1:16, each = 3)
# Write out data frame of week, days, and dates for semester
cal <- tibble(week, date)
write_xlsx(cal, path = "~/Desktop/tr.xlsx")
day
library(lubridate)
library(writexl)
library(tidyverse)
# Set start and end dates
start <- as.Date("2020-01-13")
end <- as.Date("2020-05-01")
# Set days to include and exclude
include_days <- seq(start , end, by = "day")
# exclude_days <- c("Monday", "Wednesday", "Friday", "Saturday", "Sunday")
exclude_days <- c("Monday", "Wednesday", "Friday", "Saturday")
# Subset to exclude above days
my_weekdays <- subset(include_days, !weekdays(include_days) %in% exclude_days)
# Extract elements
day <- weekdays(my_weekdays, abbreviate = TRUE)
day_num <- day(my_weekdays)
month <- months(my_weekdays, abbr = TRUE)
# Paste elements
days <- paste(day, day_num, sep = ". ")
date <- paste(days, month, sep = "-")
week <- rep(1:16, each = 3)
# Write out data frame of week, days, and dates for semester
cal <- tibble(week, date)
write_xlsx(cal, path = "~/Desktop/tr.xlsx")
week
days
date
my_weekdays
# Write out data frame of week, days, and dates for semester
cal <- tibble(week, date)
library(lubridate)
library(writexl)
library(tidyverse)
# Set start and end dates
start <- as.Date("2020-01-13")
end <- as.Date("2020-05-01")
# Set days to include and exclude
include_days <- seq(start , end, by = "day")
# exclude_days <- c("Monday", "Wednesday", "Friday", "Saturday", "Sunday")
exclude_days <- c("Monday", "Wednesday", "Friday", "Saturday")
# Subset to exclude above days
my_weekdays <- subset(include_days, !weekdays(include_days) %in% exclude_days)
# Extract elements
day <- weekdays(my_weekdays, abbreviate = TRUE)
day_num <- day(my_weekdays)
month <- months(my_weekdays, abbr = TRUE)
# Paste elements
days <- paste(day, day_num, sep = ". ")
date <- paste(days, month, sep = "-")
week <- rep(1:18, each = 3)
# Write out data frame of week, days, and dates for semester
cal <- tibble(week, date)
write_xlsx(cal, path = "~/Desktop/tr.xlsx")
length(week)
length(date)
length(days)
library(lubridate)
library(writexl)
library(tidyverse)
# Set start and end dates
start <- as.Date("2020-01-13")
end <- as.Date("2020-05-01")
# Set days to include and exclude
include_days <- seq(start , end, by = "day")
# exclude_days <- c("Monday", "Wednesday", "Friday", "Saturday", "Sunday")
exclude_days <- c("Monday", "Wednesday", "Friday", "Saturday")
# Subset to exclude above days
my_weekdays <- subset(include_days, !weekdays(include_days) %in% exclude_days)
# Extract elements
day <- weekdays(my_weekdays, abbreviate = TRUE)
day_num <- day(my_weekdays)
month <- months(my_weekdays, abbr = TRUE)
# Paste elements
days <- paste(day, day_num, sep = ". ")
date <- paste(days, month, sep = "-")
week <- rep(1:16, each = 3)
# Write out data frame of week, days, and dates for semester
cal <- tibble(week, date)
write_xlsx(cal, path = "~/Desktop/tr.xlsx")
length(days)
length(date)
length(week)
week
tibble(days, date)
date
print(date)
print(tibble(date), n = Inf)
library(lubridate)
library(writexl)
library(tidyverse)
# Set start and end dates
start <- as.Date("2020-01-13")
end <- as.Date("2020-05-03")
# Set days to include and exclude
include_days <- seq(start , end, by = "day")
# exclude_days <- c("Monday", "Wednesday", "Friday", "Saturday", "Sunday")
exclude_days <- c("Monday", "Wednesday", "Friday", "Saturday")
# Subset to exclude above days
my_weekdays <- subset(include_days, !weekdays(include_days) %in% exclude_days)
# Extract elements
day <- weekdays(my_weekdays, abbreviate = TRUE)
day_num <- day(my_weekdays)
month <- months(my_weekdays, abbr = TRUE)
# Paste elements
days <- paste(day, day_num, sep = ". ")
date <- paste(days, month, sep = "-")
week <- rep(1:16, each = 3)
# Write out data frame of week, days, and dates for semester
cal <- tibble(week, date)
write_xlsx(cal, path = "~/Desktop/tr.xlsx")
library(lubridate)
library(writexl)
library(tidyverse)
# Set start and end dates
start <- as.Date("2020-01-13")
end <- as.Date("2020-05-01")
# Set days to include and exclude
include_days <- seq(start , end, by = "day")
exclude_days <- c("Monday", "Wednesday", "Friday", "Saturday", "Sunday")
# Subset to exclude above days
my_weekdays <- subset(include_days, !weekdays(include_days) %in% exclude_days)
# Extract elements
day <- weekdays(my_weekdays, abbreviate = TRUE)
day_num <- day(my_weekdays)
month <- months(my_weekdays, abbr = TRUE)
# Paste elements
days <- paste(day, day_num, sep = ". ")
date <- paste(days, month, sep = "-")
week <- rep(1:16, each = 2)
# Write out data frame of week, days, and dates for semester
cal <- tibble(week, date)
write_xlsx(cal, path = "~/Desktop/tr.xlsx")
library(lubridate)
library(writexl)
library(tidyverse)
# Set start and end dates
start <- as.Date("2020-01-13")
end <- as.Date("2020-05-03")
# Set days to include and exclude
include_days <- seq(start , end, by = "day")
exclude_days <- c("Monday", "Wednesday", "Friday", "Saturday")
# Subset to exclude above days
my_weekdays <- subset(include_days, !weekdays(include_days) %in% exclude_days)
# Extract elements
day <- weekdays(my_weekdays, abbreviate = TRUE)
day_num <- day(my_weekdays)
month <- months(my_weekdays, abbr = TRUE)
# Paste elements
days <- paste(day, day_num, sep = ". ")
date <- paste(days, month, sep = "-")
week <- rep(1:16, each = 3)
# Write out data frame of week, days, and dates for semester
cal <- tibble(week, date)
write_xlsx(cal, path = "~/Desktop/tr.xlsx")
cal
library(lubridate)
library(writexl)
library(tidyverse)
# Set start and end dates
start <- as.Date("2020-01-13")
end <- as.Date("2020-05-01")
# Set days to include and exclude
include_days <- seq(start , end, by = "day")
exclude_days <- c("Monday", "Wednesday", "Friday", "Saturday", "Sunday")
# Subset to exclude above days
my_weekdays <- subset(include_days, !weekdays(include_days) %in% exclude_days)
# Extract elements
day <- weekdays(my_weekdays, abbreviate = TRUE)
day_num <- day(my_weekdays)
month <- months(my_weekdays, abbr = TRUE)
# Paste elements
days <- paste(day, day_num, sep = ". ")
date <- paste(days, month, sep = "-")
week <- rep(1:16, each = 2)
# Write out data frame of week, days, and dates for semester
cal <- tibble(week, date)
cal
print(cal, n = Inf)
32-4
popsize = 10
nstrats = 3
sample(1:nstrats, popsize, T)
Population <- sample(1:nstrats, popsize, T)
Opponents <- sample(Population)
Pairings <- cbind(Population, Opponents)
Pairings
split(sample(Population),rep(1:(popsize/2),each=2))
popsize = 14
nstrats = 7
Population <- sample(1:nstrats, popsize, T)
Opponents <- sample(Population)
Pairings <- cbind(Population, Opponents)
split(sample(Population),rep(1:(popsize/2),each=2))
split(sample(Population),rep(1:(popsize/2),each=2))
combn(unique(1:14), 2)
sample(1:14, 2)
sample(seq(1:14, 2))
sample(seq(1:14, 2), 2)
sample(1:7, 14, F)
sample(1:14, 7, F)
sample(1:7, 7, F)
sample(8:14, 7, F)
popsize = 14
nstrats = 7
Population <- sample(1:nstrats, popsize, T)
Opponents <- sample(Population)
Pairings <- cbind(Population, Opponents)
Pairings
popsize = 14
nstrats = 2
Population <- sample(1:nstrats, popsize, T)
Opponents <- sample(Population)
Pairings <- cbind(Population, Opponents)
Pairings
Population <- sample(1:7, 7)
Opponents <- sample(8:14, 7)
Pairings <- cbind(Population, Opponents)
Pairings
data.frame(Population, Opponents)
data.frame(Team = 1:7, Population, Opponents)
mem_a <- sample(1:7, size = 7, replace = FALSE)
mem_b <- sample(8:14, size = 7, replace = FALSE)
teams <- tibble(team = 1:7, mem_a, mem_b)
teams <- tidyverse::tibble(team = 1:7, mem_a, mem_b)
?tibble
teams <- tibble::tibble(team = 1:7, mem_a, mem_b)
teams
mem_a <- sample(1:7, size = 7, replace = FALSE)
mem_b <- sample(8:14, size = 7, replace = FALSE)
(teams <- tibble::tibble(team = 1:7, mem_a, mem_b))
mem_a <- sample(1:7, size = 7, replace = FALSE)
mem_b <- sample(8:14, size = 7, replace = FALSE)
(teams <- tibble::tibble(team = 1:7, mem_a, mem_b))
mem_a <- sample(1:7, size = 7, replace = FALSE)
mem_b <- sample(8:14, size = 7, replace = FALSE)
(teams <- tibble::tibble(team = 1:7, mem_a, mem_b))
mem_a <- sample(1:7, size = 7, replace = FALSE)
mem_b <- sample(8:14, size = 7, replace = FALSE)
(teams <- tibble::tibble(team = 1:7, mem_a, mem_b))
mem_a <- sample(1:7, size = 7, replace = FALSE)
mem_b <- sample(8:14, size = 7, replace = FALSE)
(teams <- tibble::tibble(team = 1:7, mem_a, mem_b))
unique(expand.grid(data.frame(a=1:45,b=101:145)))
Last.Name <- c("Picard","Troi","Riker","La Forge", "Yar", "Crusher", "Crusher", "Data")
First.Name <- c("Jean-Luc", "Deanna", "William", "Geordi", "Tasha", "Beverly", "Wesley", "Data")
Email <- c("a@a.com","b@b.com", "c@c.com", "d@d.com", "e@e.com", "f@f.com", "g@g.com", "h@h.com")
Section <- c(1,1,2,2,3,3,4,4)
df <- data.frame(Last.Name,First.Name,Email,Section)
df
roster <- read_csv("/Users/AB/Desktop/S2020_7324_Roster.csv")
roster <- readr::read_csv("/Users/AB/Desktop/S2020_7324_Roster.csv")
roster <- readr::read_csv("/Users/AB/Desktop/S2020_7324_Roster.csv")
roster
df %>% group_by(Section) %>% slice(sample(c(1,2),1))
random_4 <- dplyr::df %>% group_by(Section) %>% slice(sample(c(1,2),1))
library(tidyverse)
random_4 <- df %>% group_by(Section) %>% slice(sample(c(1,2),1))
random_4
df
df %>% group_by(Section) %>% slice(sample(c(1,2),1))
df
roster
rep(sample(1:7), 2)
length(rep(sample(1:7), 2))
roster %>%
mutate(rep(sample(1:7), 2))
roster %>%
mutate(team_num = rep(sample(1:7), 2))
roster %>%
mutate(team_num = rep(sample(1:7), 2)) %>%
arrange(team_num)
roster <- readr::read_csv("/Users/AB/Desktop/S2020_7324_Roster.csv")
roster %>%
mutate(team_num = rep(sample(1:7), 2)) %>%
arrange(team_num)
roster <- readr::read_csv("/Users/AB/Dropbox/UMHB/Teaching/Spring 2020/EDAD 7324/Roster/S2020_7324_Roster.csv")
roster %>%
mutate(team_num = rep(sample(1:7), 2)) %>%
arrange(team_num) %>%
write_csv(., path = "/Users/AB/Dropbox/UMHB/Teaching/Spring 2020/EDAD 7324/team_list.csv")
library(tidyverse)
library(tidyverse)
roster <- readr::read_csv("/Users/AB/Dropbox/UMHB/Teaching/Spring 2020/EDAD 7324/Roster/S2020_7324_Roster.csv")
roster %>%
mutate(team_num = rep(sample(1:7), 2)) %>%
arrange(team_num) %>%
write_csv(., path = "/Users/AB/Dropbox/UMHB/Teaching/Spring 2020/EDAD 7324/team_list.csv")
roster <- readr::read_csv("/Users/AB/Dropbox/UMHB/Teaching/Spring 2020/EDAD 7324/Roster/S2020_7324_Email_Roster.csv")
library(tidyverse)
roster <- readr::read_csv("/Users/AB/Dropbox/UMHB/Teaching/Spring 2020/EDAD 7324/Roster/S2020_7324_Email_Roster.csv")
roster %>%
mutate(team_num = rep(sample(1:7), 2)) %>%
arrange(team_num)
roster <- readr::read_csv("/Users/AB/Dropbox/UMHB/Teaching/Spring 2020/EDAD 7324/Roster/S2020_7324_Email_Roster.csv")
roster %>%
mutate(team_num = rep(sample(1:7), 2))
install.packages("randomizr")
library(randomizr)
Last.Name <- c("Picard","Troi","Riker","La Forge", "Yar", "Crusher", "Crusher", "Data")
First.Name <- c("Jean-Luc", "Deanna", "William", "Geordi", "Tasha", "Beverly", "Wesley", "Data")
Email <- c("a@a.com","b@b.com", "c@c.com", "d@d.com", "e@e.com", "f@f.com", "g@g.com", "h@h.com")
Section <- c(1,1,2,2,3,3,4,4)
df <- data.frame(Last.Name,First.Name,Email,Section)
df$group <- block_ra(block_var = df$Section,
condition_names = c("group_1", "group_2"))
df
Last.Name <- c("Picard","Troi","Riker","La Forge", "Yar", "Crusher", "Crusher", "Data")
First.Name <- c("Jean-Luc", "Deanna", "William", "Geordi", "Tasha", "Beverly", "Wesley", "Data")
Email <- c("a@a.com","b@b.com", "c@c.com", "d@d.com", "e@e.com", "f@f.com", "g@g.com", "h@h.com")
Section <- c(1,1,2,2,3,3,4,4)
df <- data.frame(Last.Name,First.Name,Email,Section)
install.packages("randomizr")
library(randomizr)
df$group <- block_ra(block_var = df$Section,
condition_names = c("group_1", "group_2"))
?randomizr::block_ra
blocks <- rep(c("A", "B","C"), times = c(50, 100, 200))
Z <- block_ra(blocks = blocks)
table(blocks, Z)
set <-  tapply(1:nrow(df), df$Section, FUN = sample, size = 1)
df[set,]    # show the sampled set
df[-set,]
roster
roster <- readr::read_csv("/Users/AB/Dropbox/UMHB/Teaching/Spring 2020/EDAD 7324/Roster/S2020_7324_Email_Roster.csv")
roster %>%
mutate(team_num = rep(sample(1:7), 2)) %>%
arrange(team_num)
sample(dates, c(2, 2, 3))
dates <- 1:3
sample(dates, c(2, 2, 3))
sample(dates, c(2, 2, 3), 7)
sample(dates, 7)
sample(dates, 7, replace = T)
sample(dates, 7, replace = T, prob = .33)
sample(dates, 7, replace = T, prob = 3)
?sample
sample(dates, 7, replace = T, prob = c(.5, .5, .75))
sample(dates, 7, replace = T, prob = c(.5, .5, .75, .4))
sample(dates, 7, replace = T, prob = c(.5))
qnorm(0:435)
pnorm(0:435)
pnorm(1:435, .10)
?qnorm
qnorm(435)
quantile(0:435, prob = seq(0, 1, .10))
quantile(0:435, prob = seq(0, 1, .001))
quantile(0:435, prob = c(.495, .595, .695, .795, .895))
quantile(0:435, prob = c(.49, .59, .69, .79, .89))
ecdf_fun <- function(x,perc) ecdf(x)(perc)
ecdf_fun(0:435, 435)
ecdf_fun(0:435, 435)
quantile(0:435, prob = c(.49, .59, .69, .79, .89))
quantile(0:435, prob = c(.495, .595, .695, .795, .895))
quantile(0:435, prob = seq(0, 1, .10))
quantile(0:435, prob = c(.4945, .595, .695, .795, .895))
quantile(0:435, prob = c(.4945, .5945, .6945, .7945, .8945))
quantile(0:435, prob = seq(0, 1, .10))
quantile(0:435, prob = c(.49, .59, .69, .79, .89))
&  &  &  \\
&  &  &  \\
\hline
```{r calendar, child = "05_Course_Calendar/01_course_calendar.Rmd"}
?omit
ecdf_fun <- function(x, perc) ecdf(x)(perc)
ecdf_fun(0:300, 300)
quantile(0:300, prob = seq(0, 1, .001))
quantile(0:300, prob = seq(0, 1, .10))
quantile(0:300, prob = seq(0, 1, .001))
quantile(0:300, prob = c(.4945, .5945, .6945, .7945, .8945))
quantile(0:300, prob = c(.49, .59, .69, .79, .89))
ecdf_fun <- function(x, perc) ecdf(x)(perc)
ecdf_fun(0:435, 435)
quantile(0:300, prob = seq(0, 1, .10))
quantile(0:300, prob = c(.4945, .5945, .6945, .7945, .8945))
quantile(0:300, prob = seq(0, 1, .001))
quantile(0:300, prob = c(.4945, .5945, .6945, .7945, .8945))
quantile(0:300, prob = c(.49, .59, .69, .79, .89))
